name: Has diff
description: Returns if there is diff within the repository from the current directory.

inputs:
  regexp-to-ignore:
    description: Regexp patterns passed to ignore-matching-lines when diffing.
  paths-to-ignore:
    description: Files and paths to ignore when checking if they changed. This is passed to git update-index.
  fail-on-diff:
    description: Fail the job on any detected diff.
    default: "true"
outputs:
  diff:
    description: Returns if there is a local diff.

runs:
  using: "composite"
  steps:
    - name: Returns if there is a local diff
      shell: bash
      run: |
        echo Returns if there is a local diff
        set -eu

        # Ignore requested file for changes
        if [ -n "${{ inputs.paths-to-ignore }}" ]; then
          git update-index --assume-unchanged ${{ inputs.paths-to-ignore }}
          on_exit() {
              # Restore files
              git update-index --no-assume-unchanged ${{ inputs.paths-to-ignore }}
          }
          trap on_exit EXIT INT QUIT ABRT PIPE TERM
        fi


        # Any new file needs to be considered as empty.
        git add -N .

        # Ignore modification time which will change anyway due to git checkout.
        diffCmd="diff --ignore-matching-lines 'modTime'"

        # Additional arguments to ignore.
        if [ -n "${{ inputs.regexp-to-ignore }}" ]; then
          diffCmd="${diffCmd} --ignore-matching-lines '${{ inputs.regexp-to-ignore }}'"
        fi

        DIFF=$(git difftool -y -x "${diffCmd}" .)
        if [ -z "${DIFF}" ]; then
          echo "diff=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "diff=true" >> $GITHUB_OUTPUT

        echo "A modification has been detected:"
        git status .

        echo ""
        echo "::group::Full unfiltered diff"
        git diff --ignore-cr-at-eol .
        echo "::endgroup::"

        if [ "${{ inputs.fail-on-diff }}" == true ]; then
          exit 1
        fi
