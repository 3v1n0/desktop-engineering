name: Build debian package
description: Builds a debian package and uploads the artifact

inputs:
  source-dir:
    required: false
    description: Directory where the source is located
  docker-image:
    required: false
    default: ubuntu:rolling
    description: The docker image used to build the package
  DEB_BUILD_OPTIONS:
    required: false
    default: ''
    description: The DEB_BUILD_OPTIONS environment variable.
  token:
    required: false
    description: If provided, used for git authentication in the source build
  lintian:
    required: false
    description: Arguments to pass to lintian, if any. Set to false to skip the lintian chek.
    default: ''
  extra-source-build-deps:
    description: A list of extra build dependencies required during source build.
    required: false
    # FIXME: this should default to '', but we don't want to break job deps for now
    default: 'ca-certificates git'


# The process:
# 1. We build the source package in a docker container with ca-certificates installed and thus,
#    a useful internet connection.
# 2. We the extract the source package.
# 3. We build the .deb from the source package, in a container without ca-certificates (unless it
#    is added as a build dependency), hence without a useful internet connection.
#
# To help with debugging, here are the processes and the directories they takes place in:
#
#  ${{ github.workspace }}
#     ├── a/b/c/${{ inputs.source-dir }}
#     │                 |
#     │           Build source pkg
#     │                 ↓
#     ├── ${{ env.SOURCE_OUTPUT_DIR }}
#     │                 |
#     │          Extract source pkg
#     │                 ↓
#     ├── ${{ env.BUILD_INPUT_DIR }}
#     │                 |
#     │          Build debian pkg
#     │                 ↓
#     └── ${{ env.BUILD_OUTPUT_DIR }}

runs:
  using: "composite"
  # image: ${{ inputs.docker-image }}
  # image: ubuntu:devel
  steps:
    - name: Set up source package build
      shell: bash
      run: |
        set -eu

        echo "::group::Install devscripts"
        sudo apt update
        sudo apt install -y devscripts
        echo "::endgroup::"

        echo "::group::Create local version with commit and docker container"
        cd '${{ inputs.source-dir }}'

        # Sanitize the docker name so that it stick to debian policy
        # https://www.debian.org/doc/debian-policy/ch-controlfields.html#version
        sanitized_docker=$( echo "${{ inputs.docker-image }}" | sed -r 's/[^a-zA-Z0-9.+~]+/+/g' )

        # Short commit to avoid "package-has-long-file-name"
        commit=$(echo ${{ github.sha }} | cut -c1-8)

        export DEBFULLNAME="GitHub actions runner"
        export DEBEMAIL="noreply@github.com"
        debchange --local "~${sanitized_docker}+${commit}" "Github build. Run id: ${{ github.run_id }}. Run number: ${{ github.run_number }}."
        
        echo "::endgroup::"

        echo "::group::Parsing name and version"
        echo PKG_NAME="$( dpkg-parsechangelog --show-field source )" >> $GITHUB_ENV
        echo PKG_VERSION="$( dpkg-parsechangelog --show-field version )" >> $GITHUB_ENV
        cd -
        echo "::endgroup::"

        echo "::group::Prepare source build"
        echo SOURCE_OUTPUT_DIR="$( mktemp --directory --tmpdir=. )" >> $GITHUB_ENV
        echo "::endgroup::"

    - name: Prepare Build package sources
      uses: addnab/docker-run-action@v3
      with:
        image: ${{ inputs.docker-image }}
        options: |
          -v ${{ github.workspace }}:/${{ github.workspace }} -w ${{ github.workspace }}
          -e DEBIAN_FRONTEND=noninteractive
          -e PKG_NAME=${{ env.PKG_NAME }}
          -e PKG_VERSION=${{ env.PKG_VERSION }}
          -e SOURCE_OUTPUT_DIR=${{ env.SOURCE_OUTPUT_DIR }}
          -e DEB_BUILD_OPTIONS="${{ inputs.DEB_BUILD_OPTIONS }}"
        # -e EXTRA_BUILD_DEPS="${{ inputs.extra-source-build-deps }}"
        shell: bash
        run: |
          set -eu
          echo "::group::Install build dependencies"
          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90aptyes
          apt update
          apt dist-upgrade
          apt build-dep .
          apt install git ca-certificates
          # if [ -n "${EXTRA_BUILD_DEPS}" ]; then
          #   # Install extra packages for build-deps, to allow downloading vendored sources
          #   apt install ${EXTRA_BUILD_DEPS}
          # fi
          echo "::endgroup::"

          echo "::group::Build debian source package"
          dpkg-buildpackage -D -S --sanitize-env
          set -x
          mv -v $(find ../ -maxdepth 1 -name "${PKG_NAME}_*") ${SOURCE_OUTPUT_DIR}
          echo "::endgroup::"

    - name: Uploading source packages
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }} Debian Sources
        path: ${{ env.SOURCE_OUTPUT_DIR }}/
        if-no-files-found: error

    - name: Run lintian on sources
      if: inputs.lintian != 'false'
      uses: addnab/docker-run-action@v3
      with:
        image: ${{ inputs.docker-image }}
        options: |
          -v ${{ github.workspace }}:/work -w /work
          -e DEBIAN_FRONTEND=noninteractive
          -e SOURCE_OUTPUT_DIR="${{ env.SOURCE_OUTPUT_DIR }}"
          -e LINTIAN_ARGS="${{ inputs.lintian }}"
        shell: bash
        run: |
          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90aptyes
          apt update
          apt dist-upgrade
          apt install lintian
          lintian ${LINTIAN_ARGS} -- "${SOURCE_OUTPUT_DIR}"/*.changes


    # # - name: Setup build user
    # #   run: |
    # #     adduser --disabled-password --gecos "" builder
    # #     chown builder:builder . -R

    # # - name: Install build dependencies
    # #   run: |
    # #     set -eu
    # #     apt build-dep .

    # - name: Build source package
    #   uses: addnab/docker-run-action@v3
    #   with:
    #     image: ${{ inputs.docker-image }}
    #     options: -v ${{ github.workspace }}:/work -w /work -e DEBIAN_FRONTEND=noninteractive
    #     shell: bash
    #     run: |
    #       set -eu
    #       dpkg-buildpackage -D -S --sanitize-env
    #       mv -v ../"${{ env.PKG_NAME }}"_* "${{ env.SOURCE_OUTPUT_DIR }}"

    # # - name: Build source packages
    # # # FIXME: Support local docker files too
    # #   image: ${{ inputs.docker-image }}
    # #   options: -v ${{ github.workspace }}:/work -w /work -e DEBIAN_FRONTEND=noninteractive

    # # - name: Build packages
    #   # run: |
    #   #   source_name=$(dpkg-parsechangelog -S Source)
    #   #   mv -v ../"${{ env.PKG_NAME }}"_* "${{ env.SOURCE_OUTPUT_DIR }}"
    #   #   ls -lht *.*deb
    # - name: Uploading source packages
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }} Debian Sources
    #     path: ${{ env.SOURCE_OUTPUT_DIR }}/
    #     if-no-files-found: error
    # # - name: Build source package
    # #   uses: jtdor/build-deb-action@v1
    # #   with:
    # #     source-dir: ${{ inputs.source-dir }}
    # #     artifacts-dir: ${{ env.SOURCE_OUTPUT_DIR }}
    # #     docker-image: ${{ inputs.docker-image }}
    # #     buildpackage-opts: --build=source
    # #     extra-build-deps: ca-certificates git
    # #     before-build-hook: |
    # #       GITHUB_TOKEN="${{ inputs.token }}"
    # #       if [ -n "${GITHUB_TOKEN}" ]; then
    # #         git config --system url."https://api:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
    # #       fi
    # - name: Run lintian on sources
    #   if: inputs.lintian != 'false'
    #   shell: bash
    #   working-directory: ${{ env.SOURCE_OUTPUT_DIR }}
    #   run: lintian ${{ inputs.lintian }} -- *.changes

    # - name: Disable Internet access
    #   if: inputs.lintian != 'false'
    #   shell: bash
    #   run: |
    #     set -eu
    #     apt remove ca-certificates || true
    #     rm -f /etc/resolv.conf

    # - name: Set up package build
    #   shell: bash
    #   run: |
    #     set -eu

    #     echo "::group::Create build input directory"
    #     # Appending /source because 'dpkg-source --extract' needs the output directory to be non-existent
    #     BUILD_INPUT_DIR="$( $AS_USER mktemp --directory --tmpdir='.' )/source"
    #     echo BUILD_INPUT_DIR="${BUILD_INPUT_DIR}" >> $GITHUB_ENV
    #     echo "::endgroup::"
        
    #     echo "::group::Create build output directory"
    #     echo BUILD_OUTPUT_DIR="$( $AS_USER mktemp --directory --tmpdir='.' )" >> $GITHUB_ENV
    #     echo "::endgroup::"

    #     echo "::group::Extract source package"
    #     BUILD_INPUT_DIR=$(realpath "${BUILD_INPUT_DIR}")
    #     cd ${{ env.SOURCE_OUTPUT_DIR }}
    #     dpkg-source --extract ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}.dsc "${BUILD_INPUT_DIR}"
    #     echo "::endgroup::"
    # - name: Build package
    #   run: |
    #     set -eu
    #     cd "${{ env.BUILD_INPUT_DIR }}"
    #     $AS_USER dpkg-buildpackage -b --sanitize-env
    #     mv -v ../*.*deb "${{ env.BUILD_OUTPUT_DIR }}"
    #     # artifacts-dir: ${{ env.BUILD_OUTPUT_DIR }}
    #     # source-dir: ${{ env.BUILD_INPUT_DIR }}
    #     # docker-image: ${{ inputs.docker-image }}
    # # - name: Build package
    # #   uses: jtdor/build-deb-action@v1
    # #   with:
    # #     artifacts-dir: ${{ env.BUILD_OUTPUT_DIR }}
    # #     source-dir: ${{ env.BUILD_INPUT_DIR }}
    # #     docker-image: ${{ inputs.docker-image }}
    # - name: Copy source package to output dir
    #   shell: bash
    #   run: |
    #     set -eu
    #     cp -r ${{ env.SOURCE_OUTPUT_DIR }}/* ${{ env.BUILD_OUTPUT_DIR }}
    # - name: Upload artefacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}
    #     path: ${{ env.BUILD_OUTPUT_DIR }}/
    #     if-no-files-found: error
